<?php

namespace App\Entity;

use App\Repository\ContributorRepository;
use App\Validator\Constraints\PasswordRequirements;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Validator\Constraints as Assert;

#[ORM\Table()]
#[ORM\Entity(repositoryClass: ContributorRepository::class)]
#[ORM\Index(columns: ['fullname', 'email'], name: 'admin_contributor')]
#[UniqueEntity(fields: ['email'], message: 'E-mail déjà enregistré.')]
class Contributor implements UserInterface, PasswordAuthenticatedUserInterface
{
    final public const ROLE_SUPER_ADMIN = 'ROLE_SUPER_ADMIN';

    final public const ROLE_ADMIN = 'ROLE_ADMIN';

    /**
     * Mot de passe en clair (non persisté).
     */
    #[Assert\NotBlank(message: 'Information requise.', groups: ['creation'])]
    #[PasswordRequirements()]
    public ?string $plainPassword = null;

    /**
     * Id de l'utilisateur.
     */
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: Types::INTEGER)]
    private ?int $id = null;

    /**
     * Nom complet de l'utilisateur.
     */
    #[ORM\Column(type: Types::STRING, length: 255)]
    #[Assert\NotBlank(message: 'Information requise.')]
    private ?string $fullname = null;

    /**
     * Email de l'utilisateur.
     */
    #[ORM\Column(type: 'string', length: 180, unique: true)]
    #[Assert\NotBlank(message: 'Information requise.')]
    #[Assert\Email(message: 'Format E-mail incorrect.')]
    #[Assert\NoSuspiciousCharacters(
        restrictionLevelMessage: 'Information erronée.',
        invisibleMessage: 'Information erronée.',
        mixedNumbersMessage: 'Information erronée.',
        hiddenOverlayMessage: 'Information erronée.',
        restrictionLevel: Assert\NoSuspiciousCharacters::RESTRICTION_LEVEL_HIGH,
    )]
    private ?string $email = null;

    /**
     * Mot de passe.
     */
    #[ORM\Column(type: Types::STRING, length: 255)]
    private ?string $password = null;

    /**
     * Niveau de droits.
     */
    #[ORM\Column(type: Types::STRING, length: 255)]
    private ?string $role = null;

    /**
     * <@inheritDoc>.
     */
    public function getUsername(): string
    {
        return $this->email;
    }

    /**
     * <@inheritDoc>.
     */
    public function getPassword(): ?string
    {
        return $this->password;
    }

    /**
     * <@inheritDoc>.
     */
    public function getRoles(): array
    {
        return $this->getRole() ? [$this->getRole(), 'ROLE_ALLOWED_TO_SWITCH'] : [];
    }

    /**
     * <@inheritDoc>.
     */
    public function getSalt(): ?string
    {
        return null;
    }

    /**
     * <@inheritDoc>.
     */
    public function eraseCredentials(): void {}

    /**
     * Retourne les rôles disponibles.
     */
    public static function getAvailableRoles(): array
    {
        return [
            self::ROLE_ADMIN => 'Administrateur',
            self::ROLE_SUPER_ADMIN => 'Super Administrateur',
        ];
    }

    /**
     * Retourne le label du rôle de l'utilisateur.
     */
    public function getRoleAsLabel(): string
    {
        $availableRoles = self::getAvailableRoles();

        return $availableRoles[$this->getRole()] ?? '';
    }

    /**
     * L'utilisateur est-il supprimable ?
     */
    public function isDeletable(): bool
    {
        return self::ROLE_SUPER_ADMIN != $this->getRole();
    }

    public function getUserIdentifier(): string
    {
        return $this->getEmail();
    }

    // AUTOGENERATED CODE BELLOW

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getFullname(): ?string
    {
        return $this->fullname;
    }

    public function setFullname(string $fullname): self
    {
        $this->fullname = $fullname;

        return $this;
    }

    public function getEmail(): ?string
    {
        return $this->email;
    }

    public function setEmail(string $email): self
    {
        $this->email = $email;

        return $this;
    }

    public function setPassword(string $password): self
    {
        $this->password = $password;

        return $this;
    }

    public function getRole(): ?string
    {
        return $this->role;
    }

    public function setRole(string $role): self
    {
        $this->role = $role;

        return $this;
    }
}
